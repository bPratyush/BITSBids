{"ast":null,"code":"var _jsxFileName = \"/Users/bpratyush/Downloads/chatclient/chat-app/src/component/ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nconst ChatRoom = () => {\n  _s();\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n  useEffect(() => {\n    console.log(userData);\n  }, [userData]);\n  useEffect(() => {\n    // Generate an anonymous username for the user\n    const anonymousUsername = generateAnonymousUsername();\n\n    // Set the anonymous username in the state\n    setUserData({\n      ...userData,\n      username: anonymousUsername\n    });\n\n    // Connect to the chat server with the anonymous username\n    connect();\n  }, []);\n  const generateAnonymousUsername = () => {\n    // Generate a random number to create a unique anonymous username\n    const randomUsername = `guest${Math.floor(Math.random() * 10000)}`;\n    return randomUsername;\n  };\n  const connect = () => {\n    let Sock = new SockJS('http://localhost:8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  };\n  const onConnected = () => {\n    setUserData({\n      ...userData,\n      connected: true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n  const userJoin = () => {\n    var chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []);\n          setPrivateChats(new Map(privateChats));\n        }\n        break;\n      case \"MESSAGE\":\n        publicChats.push(payloadData);\n        setPublicChats([...publicChats]);\n        break;\n    }\n  };\n  const onPrivateMessage = payload => {\n    console.log(payload);\n    var payloadData = JSON.parse(payload.body);\n    if (privateChats.get(payloadData.senderName)) {\n      privateChats.get(payloadData.senderName).push(payloadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payloadData);\n      privateChats.set(payloadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n  };\n  const onError = err => {\n    console.log(err);\n  };\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({\n      ...userData,\n      \"message\": value\n    });\n  };\n  const sendValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      console.log(chatMessage);\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n      setUserData({\n        ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n      setUserData({\n        ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n  const handleUsername = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({\n      ...userData,\n      \"username\": value\n    });\n  };\n  const disconnect = () => {\n    if (stompClient) {\n      stompClient.disconnect(() => {\n        stompClient = null;\n        setUserData({\n          ...userData,\n          \"connected\": false\n        });\n      });\n    }\n  };\n  const registerUser = () => {\n    if (!userData.connected && userData.username) {\n      // Check if a user is already connected in this browser session\n      const connectedUser = localStorage.getItem(\"connectedUser\");\n      if (connectedUser) {\n        alert(\"You are already connected as \" + connectedUser);\n      } else {\n        // If no user is connected, proceed with the connection\n        connect();\n        // Store the connected user in localStorage\n        localStorage.setItem(\"connectedUser\", userData.username);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Connecting...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"nOSxi46OteJUGdT9AgrTERn5EKQ=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useEffect","useState","over","SockJS","jsxDEV","_jsxDEV","stompClient","ChatRoom","_s","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","userData","setUserData","username","receivername","connected","message","console","log","anonymousUsername","generateAnonymousUsername","connect","randomUsername","Math","floor","random","Sock","onConnected","onError","subscribe","onMessageReceived","onPrivateMessage","userJoin","chatMessage","senderName","status","send","JSON","stringify","payload","payloadData","parse","body","get","set","push","list","err","handleMessage","event","value","target","sendValue","sendPrivateValue","receiverName","handleUsername","disconnect","registerUser","connectedUser","localStorage","getItem","alert","setItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/bpratyush/Downloads/chatclient/chat-app/src/component/ChatRoom.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\n\nvar stompClient = null;\n\nconst ChatRoom = () => {\n    const [privateChats, setPrivateChats] = useState(new Map());\n    const [publicChats, setPublicChats] = useState([]);\n    const [tab, setTab] = useState(\"CHATROOM\");\n    const [userData, setUserData] = useState({\n        username: '',\n        receivername: '',\n        connected: false,\n        message: ''\n    });\n\n    useEffect(() => {\n        console.log(userData);\n    }, [userData]);\n\n    useEffect(() => {\n        // Generate an anonymous username for the user\n        const anonymousUsername = generateAnonymousUsername();\n\n        // Set the anonymous username in the state\n        setUserData({ ...userData, username: anonymousUsername });\n\n        // Connect to the chat server with the anonymous username\n        connect();\n    }, []);\n\n    const generateAnonymousUsername = () => {\n        // Generate a random number to create a unique anonymous username\n        const randomUsername = `guest${Math.floor(Math.random() * 10000)}`;\n        return randomUsername;\n    };\n\n    const connect = () => {\n        let Sock = new SockJS('http://localhost:8080/ws');\n        stompClient = over(Sock);\n        stompClient.connect({}, onConnected, onError);\n    };\n\n    const onConnected = () => {\n        setUserData({ ...userData, connected: true });\n        stompClient.subscribe('/chatroom/public', onMessageReceived);\n        stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n        userJoin();\n    };\n\n    const userJoin = () => {\n        var chatMessage = {\n            senderName: userData.username,\n            status: \"JOIN\"\n        };\n        stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n    };\n\n\n    const onMessageReceived = (payload)=>{\n        var payloadData = JSON.parse(payload.body);\n        switch(payloadData.status){\n            case \"JOIN\":\n                if(!privateChats.get(payloadData.senderName)){\n                    privateChats.set(payloadData.senderName,[]);\n                    setPrivateChats(new Map(privateChats));\n                }\n                break;\n            case \"MESSAGE\":\n                publicChats.push(payloadData);\n                setPublicChats([...publicChats]);\n                break;\n        }\n    }\n\n    const onPrivateMessage = (payload)=>{\n        console.log(payload);\n        var payloadData = JSON.parse(payload.body);\n        if(privateChats.get(payloadData.senderName)){\n            privateChats.get(payloadData.senderName).push(payloadData);\n            setPrivateChats(new Map(privateChats));\n        }else{\n            let list =[];\n            list.push(payloadData);\n            privateChats.set(payloadData.senderName,list);\n            setPrivateChats(new Map(privateChats));\n        }\n    }\n\n    const onError = (err) => {\n        console.log(err);\n\n    }\n\n    const handleMessage =(event)=>{\n        const {value}=event.target;\n        setUserData({...userData,\"message\": value});\n    }\n    const sendValue=()=>{\n        if (stompClient) {\n            var chatMessage = {\n                senderName: userData.username,\n                message: userData.message,\n                status:\"MESSAGE\"\n            };\n            console.log(chatMessage);\n            stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n            setUserData({...userData,\"message\": \"\"});\n        }\n    }\n\n    const sendPrivateValue=()=>{\n        if (stompClient) {\n            var chatMessage = {\n                senderName: userData.username,\n                receiverName:tab,\n                message: userData.message,\n                status:\"MESSAGE\"\n            };\n\n            if(userData.username !== tab){\n                privateChats.get(tab).push(chatMessage);\n                setPrivateChats(new Map(privateChats));\n            }\n            stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n            setUserData({...userData,\"message\": \"\"});\n        }\n    }\n\n    const handleUsername=(event)=>{\n        const {value}=event.target;\n        setUserData({...userData,\"username\": value});\n    }\n    const disconnect = () => {\n        if (stompClient) {\n            stompClient.disconnect(() => {\n                stompClient = null;\n                setUserData({ ...userData, \"connected\": false });\n            });\n        }\n    };\n\n    const registerUser = () => {\n        if (!userData.connected && userData.username) {\n            // Check if a user is already connected in this browser session\n            const connectedUser = localStorage.getItem(\"connectedUser\");\n            if (connectedUser) {\n                alert(\"You are already connected as \" + connectedUser);\n            } else {\n                // If no user is connected, proceed with the connection\n                connect();\n                // Store the connected user in localStorage\n                localStorage.setItem(\"connectedUser\", userData.username);\n            }\n        }\n    };\n\n    return (\n        <div className=\"container\">\n            {userData.connected ? (\n                <div className=\"chat-box\">\n                    {/* ... (chat interface) */}\n                </div>\n            ) : (\n                <div className=\"register\">\n                    <p>Connecting...</p>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ChatRoom;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}