{"ast":null,"code":"var _jsxFileName = \"/Users/bpratyush/Downloads/chatclient/chat-app/src/component/ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nconst ChatRoom = () => {\n  _s();\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n  useEffect(() => {\n    console.log(userData);\n  }, [userData]);\n  useEffect(() => {\n    // Generate an anonymous username for the user\n    const anonymousUsername = generateAnonymousUsername();\n\n    // Set the anonymous username in the state\n    setUserData({\n      ...userData,\n      username: anonymousUsername\n    });\n\n    // Connect to the chat server with the anonymous username\n    connect();\n  }, []);\n  const generateAnonymousUsername = () => {\n    // Generate a random number to create a unique anonymous username\n    const randomUsername = `guest${Math.floor(Math.random() * 10000)}`;\n    return randomUsername;\n  };\n  const connect = () => {\n    let Sock = new SockJS('http://localhost:8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  };\n  const onConnected = () => {\n    setUserData({\n      ...userData,\n      connected: true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n  const userJoin = () => {\n    var chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []);\n          setPrivateChats(new Map(privateChats));\n        }\n        break;\n      case \"MESSAGE\":\n        publicChats.push(payloadData);\n        setPublicChats([...publicChats]);\n        break;\n    }\n  };\n  const onPrivateMessage = payload => {\n    console.log(payload);\n    var payloadData = JSON.parse(payload.body);\n    if (privateChats.get(payloadData.senderName)) {\n      privateChats.get(payloadData.senderName).push(payloadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payloadData);\n      privateChats.set(payloadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n  };\n  const onError = err => {\n    console.log(err);\n  };\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({\n      ...userData,\n      message: value\n    });\n  };\n  const sendValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      console.log(chatMessage);\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n      setUserData({\n        ...userData,\n        message: \"\"\n      });\n    }\n  };\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n      setUserData({\n        ...userData,\n        message: \"\"\n      });\n    }\n  };\n  const handleUsername = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({\n      ...userData,\n      username: value\n    });\n  };\n  const disconnect = () => {\n    if (stompClient) {\n      stompClient.disconnect(() => {\n        stompClient = null;\n        setUserData({\n          ...userData,\n          connected: false\n        });\n      });\n    }\n  };\n  const registerUser = () => {\n    if (!userData.connected && userData.username) {\n      // Check if a user is already connected in this browser session\n      const connectedUser = localStorage.getItem(\"connectedUser\");\n      if (connectedUser) {\n        alert(\"You are already connected as \" + connectedUser);\n      } else {\n        // If no user is connected, proceed with the connection\n        connect();\n        // Store the connected user in localStorage\n        localStorage.setItem(\"connectedUser\", userData.username);\n      }\n    }\n    ;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"member-list\",\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              onClick: () => {\n                setTab(\"CHATROOM\");\n              },\n              className: `member ${tab === \"CHATROOM\" && \"active\"}`,\n              children: \"Chatroom\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 33\n            }, this), [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              onClick: () => {\n                setTab(name);\n              },\n              className: `member ${tab === name && \"active\"}`,\n              children: name\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 37\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Welcome, \", userData.username]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 25\n        }, this), tab === \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"chat-messages\",\n            children: publicChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: `message ${chat.senderName === userData.username && \"self\"}`,\n              children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"avatar\",\n                children: chat.senderName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-data\",\n                children: chat.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 45\n              }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"avatar self\",\n                children: chat.senderName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 49\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"send-message\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"input-message\",\n              placeholder: \"Enter the message\",\n              value: userData.message,\n              onChange: handleMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"send-button\",\n              onClick: sendValue,\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 29\n        }, this), tab !== \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"chat-messages\",\n            children: [...privateChats.get(tab)].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: `message ${chat.senderName === userData.username && \"self\"}`,\n              children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"avatar\",\n                children: chat.senderName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-data\",\n                children: chat.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 45\n              }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"avatar self\",\n                children: chat.senderName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 49\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"send-message\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"input-message\",\n              placeholder: \"Enter the message\",\n              value: userData.message,\n              onChange: handleMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"send-button\",\n              onClick: sendPrivateValue,\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"register\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"user-name\",\n          placeholder: \"Enter your name\",\n          name: \"userName\",\n          value: userData.username,\n          onChange: handleUsername\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: registerUser,\n          children: \"Connect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this);\n  };\n};\n_s(ChatRoom, \"nOSxi46OteJUGdT9AgrTERn5EKQ=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useEffect","useState","over","SockJS","jsxDEV","_jsxDEV","stompClient","ChatRoom","_s","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","userData","setUserData","username","receivername","connected","message","console","log","anonymousUsername","generateAnonymousUsername","connect","randomUsername","Math","floor","random","Sock","onConnected","onError","subscribe","onMessageReceived","onPrivateMessage","userJoin","chatMessage","senderName","status","send","JSON","stringify","payload","payloadData","parse","body","get","set","push","list","err","handleMessage","event","value","target","sendValue","sendPrivateValue","receiverName","handleUsername","disconnect","registerUser","connectedUser","localStorage","getItem","alert","setItem","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","keys","map","name","index","chat","type","placeholder","onChange","id","_c","$RefreshReg$"],"sources":["/Users/bpratyush/Downloads/chatclient/chat-app/src/component/ChatRoom.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\n\nvar stompClient = null;\n\nconst ChatRoom = () => {\n    const [privateChats, setPrivateChats] = useState(new Map());\n    const [publicChats, setPublicChats] = useState([]);\n    const [tab, setTab] = useState(\"CHATROOM\");\n    const [userData, setUserData] = useState({\n        username: '',\n        receivername: '',\n        connected: false,\n        message: ''\n    });\n\n    useEffect(() => {\n        console.log(userData);\n    }, [userData]);\n\n    useEffect(() => {\n        // Generate an anonymous username for the user\n        const anonymousUsername = generateAnonymousUsername();\n\n        // Set the anonymous username in the state\n        setUserData({...userData, username: anonymousUsername});\n\n        // Connect to the chat server with the anonymous username\n        connect();\n    }, []);\n\n    const generateAnonymousUsername = () => {\n        // Generate a random number to create a unique anonymous username\n        const randomUsername = `guest${Math.floor(Math.random() * 10000)}`;\n        return randomUsername;\n    };\n\n    const connect = () => {\n        let Sock = new SockJS('http://localhost:8080/ws');\n        stompClient = over(Sock);\n        stompClient.connect({}, onConnected, onError);\n    };\n\n    const onConnected = () => {\n        setUserData({...userData, connected: true});\n        stompClient.subscribe('/chatroom/public', onMessageReceived);\n        stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n        userJoin();\n    };\n\n    const userJoin = () => {\n        var chatMessage = {\n            senderName: userData.username,\n            status: \"JOIN\"\n        };\n        stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n    };\n\n    const onMessageReceived = (payload) => {\n        var payloadData = JSON.parse(payload.body);\n        switch (payloadData.status) {\n            case \"JOIN\":\n                if (!privateChats.get(payloadData.senderName)) {\n                    privateChats.set(payloadData.senderName, []);\n                    setPrivateChats(new Map(privateChats));\n                }\n                break;\n            case \"MESSAGE\":\n                publicChats.push(payloadData);\n                setPublicChats([...publicChats]);\n                break;\n        }\n    };\n\n    const onPrivateMessage = (payload) => {\n        console.log(payload);\n        var payloadData = JSON.parse(payload.body);\n        if (privateChats.get(payloadData.senderName)) {\n            privateChats.get(payloadData.senderName).push(payloadData);\n            setPrivateChats(new Map(privateChats));\n        } else {\n            let list = [];\n            list.push(payloadData);\n            privateChats.set(payloadData.senderName, list);\n            setPrivateChats(new Map(privateChats));\n        }\n    };\n\n    const onError = (err) => {\n        console.log(err);\n    };\n\n    const handleMessage = (event) => {\n        const {value} = event.target;\n        setUserData({...userData, message: value});\n    };\n\n    const sendValue = () => {\n        if (stompClient) {\n            var chatMessage = {\n                senderName: userData.username,\n                message: userData.message,\n                status: \"MESSAGE\"\n            };\n            console.log(chatMessage);\n            stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n            setUserData({...userData, message: \"\"});\n        }\n    };\n\n    const sendPrivateValue = () => {\n        if (stompClient) {\n            var chatMessage = {\n                senderName: userData.username,\n                receiverName: tab,\n                message: userData.message,\n                status: \"MESSAGE\"\n            };\n\n            if (userData.username !== tab) {\n                privateChats.get(tab).push(chatMessage);\n                setPrivateChats(new Map(privateChats));\n            }\n            stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n            setUserData({...userData, message: \"\"});\n        }\n    };\n\n    const handleUsername = (event) => {\n        const {value} = event.target;\n        setUserData({...userData, username: value});\n    };\n\n    const disconnect = () => {\n        if (stompClient) {\n            stompClient.disconnect(() => {\n                stompClient = null;\n                setUserData({...userData, connected: false});\n            });\n        }\n    };\n\n    const registerUser = () => {\n        if (!userData.connected && userData.username) {\n            // Check if a user is already connected in this browser session\n            const connectedUser = localStorage.getItem(\"connectedUser\");\n            if (connectedUser) {\n                alert(\"You are already connected as \" + connectedUser);\n            } else {\n                // If no user is connected, proceed with the connection\n                connect();\n                // Store the connected user in localStorage\n                localStorage.setItem(\"connectedUser\", userData.username);\n            }\n        }\n        ;\n\n        return (\n            <div className=\"container\">\n                {userData.connected ? (\n                    <div className=\"chat-box\">\n                        <div className=\"member-list\">\n                            <ul>\n                                <li\n                                    onClick={() => {\n                                        setTab(\"CHATROOM\");\n                                    }}\n                                    className={`member ${tab === \"CHATROOM\" && \"active\"}`}\n                                >\n                                    Chatroom\n                                </li>\n                                {[...privateChats.keys()].map((name, index) => (\n                                    <li\n                                        onClick={() => {\n                                            setTab(name);\n                                        }}\n                                        className={`member ${tab === name && \"active\"}`}\n                                        key={index}\n                                    >\n                                        {name}\n                                    </li>\n                                ))}\n                            </ul>\n                        </div>\n                        <div className=\"chat-header\">\n                            <h2>Welcome, {userData.username}</h2>\n                        </div>\n                        {tab === \"CHATROOM\" && (\n                            <div className=\"chat-content\">\n                                <ul className=\"chat-messages\">\n                                    {publicChats.map((chat, index) => (\n                                        <li\n                                            className={`message ${\n                                                chat.senderName === userData.username && \"self\"\n                                            }`}\n                                            key={index}\n                                        >\n                                            {chat.senderName !== userData.username && (\n                                                <div className=\"avatar\">{chat.senderName}</div>\n                                            )}\n                                            <div className=\"message-data\">{chat.message}</div>\n                                            {chat.senderName === userData.username && (\n                                                <div className=\"avatar self\">{chat.senderName}</div>\n                                            )}\n                                        </li>\n                                    ))}\n                                </ul>\n\n                                <div className=\"send-message\">\n                                    <input\n                                        type=\"text\"\n                                        className=\"input-message\"\n                                        placeholder=\"Enter the message\"\n                                        value={userData.message}\n                                        onChange={handleMessage}\n                                    />\n                                    <button type=\"button\" className=\"send-button\" onClick={sendValue}>\n                                        Send\n                                    </button>\n                                </div>\n                            </div>\n                        )}\n                        {tab !== \"CHATROOM\" && (\n                            <div className=\"chat-content\">\n                                <ul className=\"chat-messages\">\n                                    {[...privateChats.get(tab)].map((chat, index) => (\n                                        <li\n                                            className={`message ${\n                                                chat.senderName === userData.username && \"self\"\n                                            }`}\n                                            key={index}\n                                        >\n                                            {chat.senderName !== userData.username && (\n                                                <div className=\"avatar\">{chat.senderName}</div>\n                                            )}\n                                            <div className=\"message-data\">{chat.message}</div>\n                                            {chat.senderName === userData.username && (\n                                                <div className=\"avatar self\">{chat.senderName}</div>\n                                            )}\n                                        </li>\n                                    ))}\n                                </ul>\n\n                                <div className=\"send-message\">\n                                    <input\n                                        type=\"text\"\n                                        className=\"input-message\"\n                                        placeholder=\"Enter the message\"\n                                        value={userData.message}\n                                        onChange={handleMessage}\n                                    />\n                                    <button\n                                        type=\"button\"\n                                        className=\"send-button\"\n                                        onClick={sendPrivateValue}\n                                    >\n                                        Send\n                                    </button>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                ) : (\n                    <div className=\"register\">\n                        <input\n                            id=\"user-name\"\n                            placeholder=\"Enter your name\"\n                            name=\"userName\"\n                            value={userData.username}\n                            onChange={handleUsername}\n                        />\n                        <button type=\"button\" onClick={registerUser}>\n                            Connect\n                        </button>\n                    </div>\n                )}\n            </div>\n        );\n    };\n}\n    export default ChatRoom;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}