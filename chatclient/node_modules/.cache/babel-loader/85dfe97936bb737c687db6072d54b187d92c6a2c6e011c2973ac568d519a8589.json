{"ast":null,"code":"var _jsxFileName = \"/Users/bpratyush/Downloads/chatclient/chat-app/src/component/ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nconst ChatRoom = () => {\n  _s();\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [userData, setUserData] = useState({\n    username: '',\n    // Initialize as an empty string\n    connected: false,\n    message: ''\n  });\n  useEffect(() => {\n    console.log(userData);\n  }, [userData]);\n  const connect = () => {\n    let Sock = new SockJS('http://localhost:8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  };\n  const onConnected = () => {\n    setUserData({\n      ...userData,\n      connected: true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n  const userJoin = () => {\n    var chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n  };\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n    switch (payloadData.status) {\n      case 'JOIN':\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []);\n          setPrivateChats(new Map(privateChats));\n        }\n        break;\n      case 'MESSAGE':\n        publicChats.push(payloadData);\n        setPublicChats([...publicChats]);\n        break;\n    }\n  };\n  const onPrivateMessage = payload => {\n    console.log(payload);\n    var payloadData = JSON.parse(payload.body);\n    if (privateChats.get(payloadData.senderName)) {\n      privateChats.get(payloadData.senderName).push(payloadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payloadData);\n      privateChats.set(payloadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n  };\n  const onError = err => {\n    console.log(err);\n  };\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({\n      ...userData,\n      message: value\n    });\n  };\n  const sendValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: 'MESSAGE'\n      };\n      console.log(chatMessage);\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n      setUserData({\n        ...userData,\n        message: ''\n      });\n    }\n  };\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: 'MESSAGE'\n      };\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n      stompClient.send('/app/private-message', {}, JSON.stringify(chatMessage));\n      setUserData({\n        ...userData,\n        message: ''\n      });\n    }\n  };\n  const handleUsername = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({\n      ...userData,\n      username: value\n    });\n  };\n  const disconnect = () => {\n    if (stompClient) {\n      stompClient.disconnect(() => {\n        stompClient = null;\n        setUserData({\n          ...userData,\n          connected: false\n        });\n      });\n    }\n  };\n  const handleGoogleSignIn = () => {\n    // Implement Google Sign-In logic here\n    // After a successful Google sign-in, you can set the username\n    // and call the 'connect' function.\n    const googleUsername = 'UsernameFromGoogle'; // Replace with the actual username from Google Sign-In\n    setUserData({\n      ...userData,\n      username: googleUsername\n    });\n    connect();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleGoogleSignIn,\n        children: \"Sign in with Google\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"0AJVWvU4NEPvgArf/tP7TdxG5G4=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useEffect","useState","over","SockJS","jsxDEV","_jsxDEV","stompClient","ChatRoom","_s","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","userData","setUserData","username","connected","message","console","log","connect","Sock","onConnected","onError","subscribe","onMessageReceived","onPrivateMessage","userJoin","chatMessage","senderName","status","send","JSON","stringify","payload","payloadData","parse","body","get","set","push","list","err","handleMessage","event","value","target","sendValue","sendPrivateValue","receiverName","handleUsername","disconnect","handleGoogleSignIn","googleUsername","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","_c","$RefreshReg$"],"sources":["/Users/bpratyush/Downloads/chatclient/chat-app/src/component/ChatRoom.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\n\nvar stompClient = null;\n\nconst ChatRoom = () => {\n    const [privateChats, setPrivateChats] = useState(new Map());\n    const [publicChats, setPublicChats] = useState([]);\n    const [tab, setTab] = useState(\"CHATROOM\");\n    const [userData, setUserData] = useState({\n        username: '', // Initialize as an empty string\n        connected: false,\n        message: '',\n    });\n\n    useEffect(() => {\n        console.log(userData);\n    }, [userData]);\n\n    const connect = () => {\n        let Sock = new SockJS('http://localhost:8080/ws');\n        stompClient = over(Sock);\n        stompClient.connect({}, onConnected, onError);\n    };\n\n    const onConnected = () => {\n        setUserData({ ...userData, connected: true });\n        stompClient.subscribe('/chatroom/public', onMessageReceived);\n        stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n        userJoin();\n    };\n\n    const userJoin = () => {\n        var chatMessage = {\n            senderName: userData.username,\n            status: \"JOIN\",\n        };\n        stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n    };\n\n    const onMessageReceived = (payload) => {\n        var payloadData = JSON.parse(payload.body);\n        switch (payloadData.status) {\n            case 'JOIN':\n                if (!privateChats.get(payloadData.senderName)) {\n                    privateChats.set(payloadData.senderName, []);\n                    setPrivateChats(new Map(privateChats));\n                }\n                break;\n            case 'MESSAGE':\n                publicChats.push(payloadData);\n                setPublicChats([...publicChats]);\n                break;\n        }\n    };\n\n    const onPrivateMessage = (payload) => {\n        console.log(payload);\n        var payloadData = JSON.parse(payload.body);\n        if (privateChats.get(payloadData.senderName)) {\n            privateChats.get(payloadData.senderName).push(payloadData);\n            setPrivateChats(new Map(privateChats));\n        } else {\n            let list = [];\n            list.push(payloadData);\n            privateChats.set(payloadData.senderName, list);\n            setPrivateChats(new Map(privateChats));\n        }\n    };\n\n    const onError = (err) => {\n        console.log(err);\n    };\n\n    const handleMessage = (event) => {\n        const { value } = event.target;\n        setUserData({ ...userData, message: value });\n    };\n\n    const sendValue = () => {\n        if (stompClient) {\n            var chatMessage = {\n                senderName: userData.username,\n                message: userData.message,\n                status: 'MESSAGE',\n            };\n            console.log(chatMessage);\n            stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n            setUserData({ ...userData, message: '' });\n        }\n    };\n\n    const sendPrivateValue = () => {\n        if (stompClient) {\n            var chatMessage = {\n                senderName: userData.username,\n                receiverName: tab,\n                message: userData.message,\n                status: 'MESSAGE',\n            };\n\n            if (userData.username !== tab) {\n                privateChats.get(tab).push(chatMessage);\n                setPrivateChats(new Map(privateChats));\n            }\n            stompClient.send('/app/private-message', {}, JSON.stringify(chatMessage));\n            setUserData({ ...userData, message: '' });\n        }\n    };\n\n    const handleUsername = (event) => {\n        const { value } = event.target;\n        setUserData({ ...userData, username: value });\n    };\n\n    const disconnect = () => {\n        if (stompClient) {\n            stompClient.disconnect(() => {\n                stompClient = null;\n                setUserData({ ...userData, connected: false });\n            });\n        }\n    };\n\n    const handleGoogleSignIn = () => {\n        // Implement Google Sign-In logic here\n        // After a successful Google sign-in, you can set the username\n        // and call the 'connect' function.\n        const googleUsername = 'UsernameFromGoogle'; // Replace with the actual username from Google Sign-In\n        setUserData({ ...userData, username: googleUsername });\n        connect();\n    };\n\n    return (\n        <div className=\"container\">\n            {userData.connected ? (\n                <div className=\"chat-box\">\n                    {/* ... (chat interface) */}\n                </div>\n            ) : (\n                <div className=\"register\">\n                    <button type=\"button\" onClick={handleGoogleSignIn}>\n                        Sign in with Google\n                    </button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ChatRoom;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}